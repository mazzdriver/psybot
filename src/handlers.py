from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup

from database import Database
from constants import LOCATIONS, SLOTS

router = Router()

class BookingState(StatesGroup):
    location = State()
    time = State()
    fullname = State()

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book")

@router.message(Command("book"))
async def start_booking(message: Message, state: FSMContext):
    await state.set_state(BookingState.location)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=loc)] for loc in LOCATIONS],
            resize_keyboard=True
        )
    )

@router.message(Command("my_bookings"))
async def show_bookings(message: Message):
    db = Database()
    try:
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
            cursor.execute(
                "SELECT 1 FROM psychologists WHERE chat_id = ?",
                (message.from_user.id,)
            )
            if not cursor.fetchone():
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                SELECT b.location, b.timeslot, c.fullname 
                FROM bookings b
                JOIN clients c ON b.client_id = c.chat_id
                ORDER BY b.timeslot
            ''')
            bookings = cursor.fetchall()

        if not bookings:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return

        response = ["üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"]
        for booking in bookings:
            response.append(
                f"‚ñ™ {booking['timeslot']} - {booking['fullname']} ({booking['location']})"
            )
        
        await message.answer("\n".join(response))
        
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
        print(f"Database error: {e}")


@router.message(BookingState.location, F.text.in_(LOCATIONS))
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(BookingState.time)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=time)] for time in SLOTS],
            resize_keyboard=True
        )
    )

@router.message(BookingState.time, F.text.in_(SLOTS))
async def process_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    await state.set_state(BookingState.fullname)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(BookingState.fullname)
async def process_name(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    db = Database()
    
    try:
        with db.get_cursor() as cursor:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            cursor.execute(
                "INSERT OR IGNORE INTO clients (chat_id, fullname) VALUES (?, ?)",
                (message.from_user.id, message.text)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cursor.execute(
                """INSERT INTO bookings
                (client_id, location, timeslot)
                VALUES (?, ?, ?)""",
                (message.from_user.id, data['location'], data['time'])
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
            cursor.execute("SELECT chat_id FROM psychologists")
            psychologists = cursor.fetchall()
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n–õ–æ–∫–∞—Ü–∏—è: {data['location']}\n–í—Ä–µ–º—è: {data['time']}\n–ö–ª–∏–µ–Ω—Ç: {message.text}"
        for psy in psychologists:
            await bot.send_message(psy['chat_id'], text)
            
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
        
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")
    
    await state.clear()

@router.message(Command("set_me"))
async def set_psychologist(message: Message):
    db = Database()
    try:
        with db.get_cursor() as cursor:
            cursor.execute(
                "INSERT OR REPLACE INTO psychologists (chat_id) VALUES (?)",
                (message.from_user.id,)
            )
        await message.answer("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º!")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        print(f"Database error: {e}")
